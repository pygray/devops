from rest_framework import serializersfrom django.contrib.auth.models import Group, Permission, ContentTypefrom django.contrib.auth import get_user_modelfrom django.contrib.auth.hashers import make_passwordUser = get_user_model()class UserSerializer(serializers.ModelSerializer):    """    用户序列化类    """    id = serializers.IntegerField(read_only=True)    username = serializers.CharField(required=False, read_only=False, max_length=32, label="用户名", help_text="用户名")    name = serializers.CharField(required=False, read_only=False, label="姓名", help_text="姓名")    is_active = serializers.BooleanField(required=False, label="登陆状态", help_text="登陆状态")    email = serializers.CharField(required=False, label="联系邮箱", help_text="联系邮箱")    last_login = serializers.DateTimeField(format="%Y-%m-%d %H:%M:%S", read_only=True, help_text="上次登录时间")    phone = serializers.CharField(required=False, max_length=11, min_length=11, allow_null=True, help_text="手机号",                                  error_messages={"max_length": "手机号错误", "min_length": "手机号错误"}, )    department = serializers.CharField(required=False, max_length=30, label="部门", help_text="部门")    def update(self, instance, validated_data):        instance.email = validated_data.get("email", instance.email)        instance.name = validated_data.get("name", instance.name)        instance.phone = validated_data.get("phone", instance.phone)        instance.department = validated_data.get("department", instance.department)        instance.save()        return instance    class Meta:        model = User        fields = ("id", "username", "name", "is_active", "email", "last_login", "phone", "department")class UserRegSerializer(serializers.ModelSerializer):    """    用户注册、修改序列化类    """    id = serializers.IntegerField(read_only=True)    username = serializers.CharField(max_length=32, label="用户名", help_text="用户名，用户登陆名")    password = serializers.CharField(        style={'input_type': 'password'},        label="密码",        help_text="密码",        write_only=True    )    email = serializers.EmailField(required=True, max_length=254, label="邮箱", help_text="邮箱")    name = serializers.CharField(required=False, max_length=32, label="姓名", help_text="用户姓名，中文姓名")    phone = serializers.CharField(required=False, max_length=11, min_length=11, label="手机号",                                  allow_null=True, allow_blank=True, help_text="手机号")    department = serializers.CharField(required=False, max_length=30, label="部门", help_text="部门")    def create(self, validated_data):        user = validated_data        password = user["password"]        user["password"] = make_password(password)        user_obj = User.objects.create(**user)        return user_obj    def update(self, instance, validated_data):        instance.email = validated_data.get("email", instance.email)        instance.name = validated_data.get("name", instance.name)        instance.phone = validated_data.get("phone", instance.phone)        instance.department = validated_data.get("department", instance.department)        instance.save()        return instance    class Meta:        model = User        fields = ("username", "password", "name", "id", "phone", "department", "email")class GroupSerializer(serializers.ModelSerializer):    """    角色序列化类    """    def to_representation(self, instance):        member = instance.user_set.count()        ret = super(GroupSerializer, self).to_representation(instance)        ret["member"] = member        return ret    class Meta:        model = Group        fields = ("id", "name")class UserGroupsSerializer(serializers.ModelSerializer):    """    用户的角色 序列化类    """    groups = GroupSerializer(many=True)    def to_representation(self, instance):        name = instance.name        ret = super(UserGroupsSerializer, self).to_representation(instance)        ret["name"] = name        return ret    class Meta:        model = User        fields = ("id", "username", "groups")class ContentTypeSerializer(serializers.ModelSerializer):    """    contentType序列化类    """    class Meta:        model = ContentType        fields = "__all__"class PermissionSerializer(serializers.ModelSerializer):    """    权限表序列化类    """    content_type = ContentTypeSerializer()    status = serializers.BooleanField(default=False, read_only=True)    class Meta:        model = Permission        fields = ("id", "content_type", "name", "codename", "status")