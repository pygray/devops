from rest_framework import serializersfrom django.contrib.auth.models import Group, Permission, ContentTypefrom django.contrib.auth import get_user_modelfrom django.contrib.auth.hashers import make_passwordfrom django.conf import settingsUser = get_user_model()class UserSerializer(serializers.ModelSerializer):    """    用户序列化类    """    class Meta:        model = User        fields = ("id", "username", "name", "phone", "email", "is_active")    def to_group_response(self, group_queryset):        ret = []        # 将组信息序列化        for group in group_queryset:            ret.append({                'id': group.id,                'name': group.name            })        return ret    def to_representation(self, instance):        role = self.to_group_response(instance.groups.all())        ret = super(UserSerializer, self).to_representation(instance)        ret["role"] = role        return ret    def create(self, validated_data):        validated_data["is_active"] = True        validated_data["password"] = "12345678"        instance = super(UserSerializer, self).create(validated_data=validated_data)        # instance.email = "{}{}".format(instance.username, settings.DOMAIN)        instance.set_password(validated_data["password"])        # 创建gitlab账户        # useradd.delay(validated_data['username'],validated_data['password'],instance.email,validated_data['name'])        # mail.delay("通知",        #                validated_data['username'],        #                settings.EMAIL_FROM,        #                ['787696331@qq.com'],        #                )        # res = gl.users.create({'username': validated_data['username'], 'password':validated_data['password'], 'email': instance.email, 'name': validated_data['name']})        # print(res)        instance.save()        return instance# class UserSerializer(serializers.ModelSerializer):#     """#     用户序列化类#     """#     id = serializers.IntegerField(read_only=True)#     username = serializers.CharField(required=False, read_only=False, max_length=32, label="用户名", help_text="用户名")#     name = serializers.CharField(required=False, read_only=False, label="姓名", help_text="姓名")#     is_active = serializers.BooleanField(required=False, label="登陆状态", help_text="登陆状态")#     email = serializers.CharField(required=False, label="联系邮箱", help_text="联系邮箱")#     last_login = serializers.DateTimeField(format="%Y-%m-%d %H:%M:%S", read_only=True, help_text="上次登录时间")#     phone = serializers.CharField(required=False, max_length=11, min_length=11, allow_null=True, help_text="手机号",#                                   error_messages={"max_length": "手机号错误", "min_length": "手机号错误"}, )#     department = serializers.CharField(required=False, max_length=30, label="部门", help_text="部门")##     def update(self, instance, validated_data):#         instance.email = validated_data.get("email", instance.email)#         instance.name = validated_data.get("name", instance.name)#         instance.phone = validated_data.get("phone", instance.phone)#         instance.department = validated_data.get("department", instance.department)#         instance.save()#         return instance##     class Meta:#         model = User#         fields = ("id", "username", "name", "is_active", "email", "last_login", "phone", "department")class UserRegSerializer(serializers.ModelSerializer):    """    用户注册、修改序列化类    """    id = serializers.IntegerField(read_only=True)    username = serializers.CharField(max_length=32, label="用户名", help_text="用户名，用户登陆名")    password = serializers.CharField(        style={'input_type': 'password'},        label="密码",        help_text="密码",        write_only=True    )    email = serializers.EmailField(required=True, max_length=254, label="邮箱", help_text="邮箱")    name = serializers.CharField(required=False, max_length=32, label="姓名", help_text="用户姓名，中文姓名")    phone = serializers.CharField(required=False, max_length=11, min_length=11, label="手机号",                                  allow_null=True, allow_blank=True, help_text="手机号")    department = serializers.CharField(required=False, max_length=30, label="部门", help_text="部门")    def create(self, validated_data):        user = validated_data        password = user["password"]        user["password"] = make_password(password)        user_obj = User.objects.create(**user)        return user_obj    def update(self, instance, validated_data):        instance.email = validated_data.get("email", instance.email)        instance.name = validated_data.get("name", instance.name)        instance.phone = validated_data.get("phone", instance.phone)        instance.department = validated_data.get("department", instance.department)        instance.save()        return instance    class Meta:        model = User        fields = ("username", "password", "name", "id", "phone", "department", "email")class Groupserializer(serializers.ModelSerializer):    """    group序列化类,拿到组内成员个数并序列化输出    """    def to_permission_response(self, permission_queryset):        ret = []        # 将角色权限信息序列化        for permission in permission_queryset:            ret.append({                'id': permission.id,                'name': permission.name,                'codename': permission.codename,            })        return ret    def to_members_response(self, members_queryset):        ret = []        # 将角色用户信息序列化        for member in members_queryset:            ret.append({                'id': member.id,                'username': member.username,                'name': member.name,                'phone': member.phone            })        return ret    def to_representation(self, instance):        members = self.to_members_response(instance.user_set.all())        number = instance.user_set.count()        power = self.to_permission_response(instance.permissions.all())        ret = super(Groupserializer, self).to_representation(instance)        ret["members"] = members        ret["number"] = number        ret["power"] = power        return ret    class Meta:        model = Group        fields = ("id", "name")class PermissionSerializer(serializers.ModelSerializer):    """    权限表序列化类    """    # content_type = ContentTypeSerializer()    # status = serializers.BooleanField(default=False, read_only=True)    class Meta:        model = Permission        fields = ("id", "name", "codename")